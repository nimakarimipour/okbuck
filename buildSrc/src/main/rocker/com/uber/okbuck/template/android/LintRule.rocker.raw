@import java.util.Collection
@import com.android.builder.model.LintOptions
@args (
String manifest,
String jvmArgs,
Collection sources,
Collection resources,
Collection customLints,
Collection deps,
String lintConfigXml,
LintOptions lintOptions,
)
okbuck_lint(
    name = '@name',
    manifest = '@manifest',
@if (!valid(sources)) {
    has_srcs = False,
}
@if (valid(sources) || valid(resources)) {
    inputs = [
    @for (source : sorted(sources)) {
        '@source',
    }
    @for (resource : sorted(resources)) {
        '@resource',
    }
    ],
}
@if (valid(customLints)) {
    custom_lints = [
    @for (customLint : sorted(customLints)) {
        '@customLint',
    }
    ],
}
@if (valid(jvmArgs)) {
    jvm_args = '@jvmArgs',
}
@if (valid(deps)) {
    deps = [
    @for (dep : sorted(deps)) {
        '@dep',
    }
    ],
}
    lint_options = [
@if (valid(sources)) {
    @for (source : sorted(sources)) {
        '--sources {}/@source'.format(get_base_path()),
    }
}
@if (valid(resources)) {
    @for (resource : sorted(resources)) {
        '--resources {}/@resource'.format(get_base_path()),
    }
}
@if (lintOptions.isAbortOnError()) {
        '--exitcode',
}
@if (lintOptions.isAbsolutePaths()) {
        '--fullpath',
}
@if (lintOptions.isQuiet()) {
        '--quiet',
}
@if (lintOptions.isCheckAllWarnings()) {
        '-Wall',
}
@if (lintOptions.isIgnoreWarnings()) {
        '--nowarn',
}
@if (lintOptions.isWarningsAsErrors()) {
        '-Werror',
}
@if (lintOptions.isNoLines()) {
        '--nolines',
}
@if (valid(lintOptions.getDisable())) {
        '--disable @(String.join(",", lintOptions.getDisable()))',
}
@if (valid(lintOptions.getEnable())) {
        '--enable @(String.join(",", lintOptions.getEnable()))',
}
@if (valid(lintConfigXml)) {
        '--config $(location @(lintConfigXml))',
}
@if (lintOptions.getXmlReport()) {
        '--xml "$OUT/lint-results.xml"',
}
@if (lintOptions.getHtmlReport()) {
        '--html "$OUT/lint-results.html"',
}
    ],
)
